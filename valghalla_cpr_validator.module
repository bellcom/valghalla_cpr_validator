<?php
/**
 * Implements hook_menu()
 */
function valghalla_cpr_validator_menu(){
  $items['admin/valghalla/cpr_validator'] = array(
    'title' => 'CPR Validering',
    'description' => 'Indstillinger for CPR validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_cpr_validator_settings'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_cpr_validator.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/valghalla/cpr_validator/batch'] = array(
    'title' => 'CPR Validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_cpr_validator_batch'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_cpr_validator.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type()
 */
function valghalla_cpr_validator_ctools_plugin_type(){
  return array(
    'cpr_service' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_validate()
 */
function valghalla_cpr_validator_node_validate($node, $form, &$form_state){
  if($node->type != 'volunteers'){
    return;
  }

  if($form_state['clicked_button']['#parents'][0] == 'delete'){
    return;
  }

  $cpr_field = reset($form_state['values']['field_cpr_number']);
  $cpr = $cpr_field[0]['value'];

  // Check formatting
  if(!valghalla_cpr_validator_validate_format($cpr)){
    form_set_error('field_cpr_number', t('Det angivne CPR-nummer er ikke korrekt formatteret (f.eks. 123456-8910).'));
  }

  // Check duplicates
  if($nid = valghalla_cpr_validator_check_duplicates($cpr)){
    if($nid !== $node->nid){
      form_set_error('field_cpr_number', t('Der er allerede oprettet en deltager med det angivne CPR-nummer'));
    }
  }

  // Query service
  if (variable_get('valghalla_cpr_validator_enable', FALSE)) {
    // To reduce calls to the service, we fetch the address right away, if
    // address querying is enabled
    if (variable_get('valghalla_cpr_validator_get_address', FALSE)) {
      $message = valghalla_cpr_validator_query_service('get_address', $cpr);

      $language = $form['language']['#value']; 

      form_set_value(array('#parents' => array('field_address_road', $language, 0, 'value')), $message['road'], $form_state);
      form_set_value(array('#parents' => array('field_address_road_no', $language, 0, 'value')), $message['road_no'], $form_state);
      form_set_value(array('#parents' => array('field_address_floor', $language, 0, 'value')), $message['floor'], $form_state);
      form_set_value(array('#parents' => array('field_address_door', $language, 0, 'value')), $message['door'], $form_state);
      form_set_value(array('#parents' => array('field_address_zipcode', $language, 0, 'value')), $message['zipcode'], $form_state);
      form_set_value(array('#parents' => array('field_address_city', $language, 0, 'value')), $message['city'], $form_state);
      form_set_value(array('#parents' => array('field_address_coname', $language, 0, 'value')), $message['coname'], $form_state);

    } else {
      $message = valghalla_cpr_validator_query_service('validate_cpr', $cpr);
      if (!$message['status']) {
        form_set_error('field_cpr_number', t('Det angivne CPR-nummer kan ikke valideres: ') . $message['text'] );
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Disable address fields, and let user know that the values
 * will be fetched from the CPR service.
 */
function valghalla_cpr_validator_form_volunteers_node_form_alter(&$form, &$form_state, $form_id) {
  if(variable_get('valghalla_cpr_validator_get_address', FALSE)){
    foreach(array('field_address_road', 'field_address_road_no', 'field_address_floor', 'field_address_door', 'field_address_zipcode', 'field_address_city', 'field_address_coname') as $field){
      $form[$field]['#disabled'] = TRUE;
      $form[$field]['#suffix'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';
    }
  }
}

/**
 * Validate the format of the CPR number.
 *
 * The format must be 123456-1234
 */
function valghalla_cpr_validator_validate_format($cpr){
  return preg_match("/^[0-9]{6}-[0-9]{4}$/", $cpr);
}

/**
 * Check if the cpr is used already.
 *
 * If it is we send back the nid for the volunteer.
 */
function valghalla_cpr_validator_check_duplicates($cpr){
  if($volunteer = _valghalla_helper_get_volunteer_by_cpr($cpr)){
    return $volunteer->nid;
  }
  return FALSE;
}

function valghalla_cpr_validator_query_service($action, $cpr){
  ctools_include('plugins');
  $service = variable_get('valghalla_cpr_validator_service');
  $plugin = ctools_get_plugins('valghalla_cpr_validator', 'cpr_service', $service);

  if(isset($plugin[$action]) && function_exists($plugin[$action])){
    $message = call_user_func($plugin[$action], $cpr);
  }
  else {
    $message = array('status' => FALSE, 'text' => 'Den valgte service er utilstrækkelig, "' . $action . '" er ikke implementeret.');
  }
  return $message;
}
